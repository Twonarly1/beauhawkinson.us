type Comment {
    username: String
    text: String
    post_id: ID
    post: Post @materializer(query: "getPostUsingComment_post_id_fkey")
    id: ID!
    created_at: DateTime
}

type Vote {
    created_at: DateTime
    id: ID!
    post_id: ID
    upvote: Boolean
    username: String
}

type Post {
    username: String
    id: ID!
    created_at: DateTime
    body: String
    comment: [Comment] @materializer(query: "getCommentUsingComment_post_id_fkey")
    votes: [Vote]
        @materializer(query: "getVotesByPostId", arguments: [{ name: "post_id", field: "id" }])
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
    " Queries for type 'Comment' "
    getComment(id: ID!): Comment
        @dbquery(
            type: "postgresql"
            schema: "public"
            table: "comment"
            configuration: "postgresql_config"
        )
    getCommentList: [Comment]
        @dbquery(
            type: "postgresql"
            schema: "public"
            table: "comment"
            configuration: "postgresql_config"
        )
    getCommentPaginatedList(first: Int, after: Int): [Comment]
        @dbquery(
            type: "postgresql"
            schema: "public"
            query: """
            SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
            """
            configuration: "postgresql_config"
        )
    getCommentUsingComment_post_id_fkey(id: ID!): [Comment]
        @dbquery(
            type: "postgresql"
            schema: "public"
            query: """
            SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" WHERE "post_id" = $1
            """
            configuration: "postgresql_config"
        )
    " Queries for type 'Post' "
    getPost(id: ID!): Post
        @dbquery(
            type: "postgresql"
            schema: "public"
            table: "post"
            configuration: "postgresql_config"
        )
    getPostList: [Post]
        @dbquery(
            type: "postgresql"
            schema: "public"
            table: "post"
            configuration: "postgresql_config"
        )
    getPostPaginatedList(first: Int, after: Int): [Post]
        @dbquery(
            type: "postgresql"
            schema: "public"
            query: """
            SELECT "body", "created_at", "id", "username" FROM "post" ORDER BY "id" LIMIT $1 OFFSET $2
            """
            configuration: "postgresql_config"
        )
    getPostUsingComment_post_id_fkey(post_id: ID!): Post
        @dbquery(
            type: "postgresql"
            schema: "public"
            query: """
            SELECT "body", "created_at", "id", "username" FROM "post" WHERE "id" = $1
            """
            configuration: "postgresql_config"
        )
    getVotesByPostId(post_id: ID!): [Vote]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "vote" where "post_id" = $1
            order by "created_at" desc
            """
            configuration: "postgresql_config"
        )

    getVotesByPostIdAndUsername(post_id: ID!, username: String!): [Vote]
        @dbquery(
            type: "postgresql"
            query: """
            select * from "vote" where "post_id" = $1 and "username" = $2
            """
            configuration: "postgresql_config"
        )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
    " Mutations for type 'Comment' "
    deleteComment(id: ID!): Comment
        @dbquery(
            type: "postgresql"
            schema: "public"
            table: "comment"
            dml: DELETE
            configuration: "postgresql_config"
        )
    insertComment(username: String, post_id: ID, text: String): Comment
        @dbquery(
            type: "postgresql"
            schema: "public"
            table: "comment"
            dml: INSERT
            configuration: "postgresql_config"
        )
    updateComment(
        id: ID!
        created_at: DateTime
        post_id: ID
        text: String
        username: String
    ): Comment
        @dbquery(
            type: "postgresql"
            schema: "public"
            query: """
            UPDATE "comment" SET
              "created_at" = COALESCE($2, "created_at"),
              "post_id" = COALESCE($3, "post_id"),
              "text" = COALESCE($4, "text"),
              "username" = COALESCE($5, "username")
            WHERE
              "id" = $1
            RETURNING *
            """
            configuration: "postgresql_config"
        )
    " Mutations for type 'Post' "
    deletePost(id: ID!): Post
        @dbquery(
            type: "postgresql"
            schema: "public"
            table: "post"
            dml: DELETE
            configuration: "postgresql_config"
        )
    insertPost(body: String, username: String): Post
        @dbquery(
            type: "postgresql"
            schema: "public"
            table: "post"
            dml: INSERT
            configuration: "postgresql_config"
        )
    updatePost(id: ID!, body: String, created_at: DateTime, username: String): Post
        @dbquery(
            type: "postgresql"
            schema: "public"
            query: """
            UPDATE "post" SET
              "body" = COALESCE($2, "body"),
              "created_at" = COALESCE($3, "created_at"),
              "username" = COALESCE($4, "username")
            WHERE
              "id" = $1
            RETURNING *
            """
            configuration: "postgresql_config"
        )
    insertVote(post_id: ID!, username: String!, upvote: Boolean!): Vote
        @dbquery(type: "postgresql", table: "vote", dml: INSERT, configuration: "postgresql_config")
}
